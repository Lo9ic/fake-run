{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/logic/Documents/Coding/fakemyrun-clone/src/components/Map.tsx"],"sourcesContent":["\"use client\"\n\nimport { useEffect, useRef, useState } from 'react'\nimport mapboxgl from 'mapbox-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css'\n\nmapboxgl.accessToken = process.env.NEXT_PUBLIC_MAPBOX_TOKEN || ''\n\ninterface MapProps {\n  onRouteUpdate?: (coordinates: number[][], stats: RouteStats) => void;\n  searchQuery?: string;\n  onSearchQueryChange?: (query: string) => void;\n  onSearchSelect?: (result: SearchResult) => void;\n}\n\ninterface SearchResult {\n  center: [number, number];\n  place_name: string;\n}\n\ninterface RouteStats {\n  distance: number;\n  duration: number;\n  elevationGain: number;\n}\n\ntype Coordinate = [number, number]\n\nexport default function Map({ \n  onRouteUpdate, \n  searchQuery = \"\", \n  onSearchQueryChange,\n  onSearchSelect \n}: MapProps) {\n  const mapContainer = useRef<HTMLDivElement>(null)\n  const map = useRef<mapboxgl.Map | null>(null)\n  const [coordinates, setCoordinates] = useState<Coordinate[]>([])\n  const markersRef = useRef<mapboxgl.Marker[]>([])\n  const [mapLoaded, setMapLoaded] = useState(false)\n  const [showAlignButton, setShowAlignButton] = useState(false)\n  const [isAligning, setIsAligning] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [searchResults, setSearchResults] = useState<SearchResult[]>([])\n  const [isSearching, setIsSearching] = useState(false)\n\n  // Handle search input changes\n  useEffect(() => {\n    const searchLocation = async () => {\n      if (!searchQuery) {\n        setSearchResults([])\n        return\n      }\n\n      setIsSearching(true)\n      try {\n        console.log('Searching for:', searchQuery)\n        const response = await fetch(\n          `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(searchQuery)}.json?access_token=${mapboxgl.accessToken}&limit=5&types=place,locality,neighborhood,address`\n        )\n        if (!response.ok) {\n          throw new Error('Search failed')\n        }\n        \n        const data = await response.json()\n        console.log('Search results:', data)\n        \n        if (data.features && data.features.length > 0) {\n          setSearchResults(data.features)\n          setError(null)\n        } else {\n          setSearchResults([])\n          setError('No results found')\n        }\n      } catch (err) {\n        console.error('Search error:', err)\n        setError('Failed to search location')\n      } finally {\n        setIsSearching(false)\n      }\n    }\n\n    if (searchQuery.length >= 2) {\n      const debounceTimer = setTimeout(searchLocation, 300)\n      return () => clearTimeout(debounceTimer)\n    } else {\n      setSearchResults([])\n    }\n  }, [searchQuery])\n\n  // Handle input change\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value\n    console.log('Input changed:', value)\n    onSearchQueryChange?.(value)\n  }\n\n  const handleSearchSelect = (result: SearchResult) => {\n    if (!map.current) return\n\n    const [lng, lat] = result.center\n    map.current.flyTo({\n      center: [lng, lat],\n      zoom: 14\n    })\n\n    onSearchSelect?.(result)\n    setSearchResults([])\n  }\n\n  // Calculate route statistics\n  const calculateRouteStats = async (coords: Coordinate[]): Promise<RouteStats> => {\n    let distance = 0;\n    let elevationGain = 0;\n\n    for (let i = 1; i < coords.length; i++) {\n      const [lon1, lat1] = coords[i - 1];\n      const [lon2, lat2] = coords[i];\n      \n      const R = 6371;\n      const dLat = (lat2 - lat1) * Math.PI / 180;\n      const dLon = (lon2 - lon1) * Math.PI / 180;\n      const a = \n        Math.sin(dLat/2) * Math.sin(dLat/2) +\n        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n        Math.sin(dLon/2) * Math.sin(dLon/2);\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n      distance += R * c;\n    }\n\n    elevationGain = Math.round(distance * 25);\n\n    const baseDuration = distance * 5.5;\n    const elevationTime = elevationGain / 60;\n    const turns = coords.length - 1;\n    const turnsTime = (turns * 5) / 60;\n    \n    const duration = baseDuration + elevationTime + turnsTime;\n\n    return {\n      distance,\n      duration,\n      elevationGain\n    };\n  }\n\n  // Initialize map\n  useEffect(() => {\n    if (!mapContainer.current || map.current) return\n\n    const mapInstance = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/mapbox/streets-v12',\n      center: [2.3522, 48.8566],\n      zoom: 13,\n    })\n\n    mapInstance.on('load', () => {\n      mapInstance.addSource('route', {\n        type: 'geojson',\n        data: {\n          type: 'Feature',\n          properties: {},\n          geometry: {\n            type: 'LineString',\n            coordinates: [],\n          },\n        },\n      })\n\n      mapInstance.addLayer({\n        id: 'route',\n        type: 'line',\n        source: 'route',\n        layout: {\n          'line-join': 'round',\n          'line-cap': 'round',\n        },\n        paint: {\n          'line-color': '#ff4400',\n          'line-width': 3,\n        },\n      })\n\n      map.current = mapInstance\n      setMapLoaded(true)\n    })\n\n    return () => {\n      mapInstance.remove()\n      map.current = null\n      setMapLoaded(false)\n    }\n  }, [])\n\n  // Handle map clicks and route drawing\n  useEffect(() => {\n    if (!map.current || !mapLoaded) return\n\n    const handleClick = async (e: mapboxgl.MapMouseEvent) => {\n      // Clear search results when clicking on map\n      setSearchResults([])\n      onSearchQueryChange?.(\"\")\n\n      const newCoord: Coordinate = [e.lngLat.lng, e.lngLat.lat]\n      const newCoords = [...coordinates, newCoord]\n      setCoordinates(newCoords)\n      \n      try {\n        const stats = await calculateRouteStats(newCoords)\n        onRouteUpdate?.(newCoords, stats)\n\n        const source = map.current?.getSource('route') as mapboxgl.GeoJSONSource\n        source.setData({\n          type: 'Feature',\n          properties: {},\n          geometry: {\n            type: 'LineString',\n            coordinates: newCoords,\n          },\n        })\n\n        const marker = new mapboxgl.Marker({ color: '#ff4400' })\n          .setLngLat(newCoord)\n          .addTo(map.current!)\n        markersRef.current.push(marker)\n\n        // Show align button when we have at least 2 points\n        if (newCoords.length >= 2) {\n          setShowAlignButton(true)\n        }\n        setError(null)\n      } catch (error) {\n        console.error('Error calculating route stats:', error)\n        setError('Failed to calculate route statistics')\n      }\n    }\n\n    map.current.on('click', handleClick)\n\n    return () => {\n      if (map.current) {\n        map.current.off('click', handleClick)\n      }\n    }\n  }, [mapLoaded, coordinates, onRouteUpdate])\n\n  const resetPoints = () => {\n    setCoordinates([])\n    markersRef.current.forEach(marker => marker.remove())\n    markersRef.current = []\n    setShowAlignButton(false)\n    \n    const source = map.current?.getSource('route') as mapboxgl.GeoJSONSource\n    source.setData({\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'LineString',\n        coordinates: [],\n      },\n    })\n\n    onRouteUpdate?.([], { distance: 0, duration: 0, elevationGain: 0 })\n  }\n\n  return (\n    <div className=\"relative\">\n      <div className=\"relative mb-4\">\n        <div className=\"relative\">\n          <input\n            type=\"text\"\n            value={searchQuery}\n            onChange={handleInputChange}\n            placeholder=\"Search for a location...\"\n            className=\"w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent\"\n            autoComplete=\"off\"\n          />\n          {isSearching && (\n            <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n              <div className=\"animate-spin h-5 w-5 border-2 border-orange-500 rounded-full border-t-transparent\"></div>\n            </div>\n          )}\n        </div>\n        {searchResults.length > 0 && (\n          <ul className=\"absolute z-10 w-full bg-white border rounded-lg mt-1 max-h-60 overflow-y-auto shadow-lg\">\n            {searchResults.map((result) => (\n              <li\n                key={result.place_name}\n                className=\"px-4 py-2 hover:bg-gray-100 cursor-pointer\"\n                onClick={() => handleSearchSelect(result)}\n              >\n                {result.place_name}\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n      <div ref={mapContainer} className=\"h-[600px] w-full rounded-lg\" />\n      {showAlignButton && (\n        <div className=\"absolute bottom-4 left-4 flex gap-2\">\n          <button\n            onClick={async () => {\n              setIsAligning(true)\n              try {\n                console.log('Align to Roads: Sending request with coordinates:', coordinates)\n                const response = await fetch(\n                  `https://api.mapbox.com/directions/v5/mapbox/walking/${coordinates.map(coord => coord.join(',')).join(';')}?geometries=geojson&access_token=${mapboxgl.accessToken}`\n                )\n                console.log('Align to Roads: Response status:', response.status)\n                if (!response.ok) throw new Error('Failed to align route')\n                \n                const data = await response.json()\n                console.log('Align to Roads: Response data:', data)\n                if (data.routes && data.routes[0]) {\n                  const alignedCoords = data.routes[0].geometry.coordinates as Coordinate[]\n                  console.log('Aligned coordinates:', alignedCoords)\n                  setCoordinates(alignedCoords)\n                  \n                  // Update the route line\n                  const source = map.current?.getSource('route') as mapboxgl.GeoJSONSource\n                  console.log('Updating route source with aligned coordinates')\n                  source.setData({\n                    type: 'Feature',\n                    properties: {},\n                    geometry: {\n                      type: 'LineString',\n                      coordinates: alignedCoords,\n                    },\n                  })\n                  \n                  // Update markers\n                  console.log('Removing old markers and adding new markers for aligned coordinates')\n                  markersRef.current.forEach(marker => marker.remove())\n                  markersRef.current = alignedCoords.map(coord => \n                    new mapboxgl.Marker({ color: '#ff4400' })\n                      .setLngLat(coord)\n                      .addTo(map.current!)\n                  )\n                  \n                  // Update stats\n                  const stats = await calculateRouteStats(alignedCoords)\n                  onRouteUpdate?.(alignedCoords, stats)\n                }\n              } catch (err) {\n                console.error('Error aligning to roads:', err)\n                setError('Failed to align route to roads')\n              } finally {\n                setIsAligning(false)\n              }\n            }}\n            disabled={isAligning}\n            className=\"bg-white px-6 py-3 rounded-lg shadow-lg hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed font-medium text-gray-800\"\n          >\n            {isAligning ? 'Aligning...' : 'Align to Roads'}\n          </button>\n          <button\n            onClick={resetPoints}\n            disabled={isAligning}\n            className=\"bg-white px-6 py-3 rounded-lg shadow-lg hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed font-medium text-gray-800\"\n          >\n            Reset Points\n          </button>\n        </div>\n      )}\n      {error && (\n        <div className=\"absolute bottom-20 left-4 right-4 bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg\">\n          {error}\n        </div>\n      )}\n    </div>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}